<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// constant value
const int N = 6;
const int F = 0;
typedef int[0, N-F-1] n_id;

const int SLOTMAX = 3;
typedef int[0,SLOTMAX-1] s_id;

// ~V7.10
// const int V = 3;
// const int VP = 10;

// test var
// int test = 0;

const int V = 3;
const int INFINITY = 5;
const int MSGGAP = 3;
const int PRIGAP = 10;
const int TIMERGAP = 10;
// oconst int ROUNDGAP = 2;

// states
const int stepPropose = 0;
const int stepPrevote = 1;
const int stepPrecommit = 2;
const int stepCommit = 3;

const int timeoutPropose = 3;
const int timeoutProposeDelta = 1;
const int timeoutPrevote = 3;
const int timeoutPrevoteDelta = 1;
const int timeoutPrecommit = 3;
const int timeoutPrecommitDelta = 1;

// global state
int[0, SLOTMAX] slotCur = 0;
int[0, N-1] proposedNode = 0;
int[0, N] nodeLayer[SLOTMAX] = {5, 6, 5};
bool commitList[N] = {false, false, false, false, false, false};
int[1,1] VP[N] = {1, 1, 1, 1, 1, 1};
int cnt_priority[N] = {0, 0, 0, 0, 0, 0};

bool check_can_commit = false;

// channel
broadcast chan slotDone;
broadcast chan slotSuccess;
broadcast chan slotFail;
broadcast chan slotUnknown;
broadcast chan slotDeadlock;
broadcast chan slotStarted[SLOTMAX+1];

// timer
typedef int[0,N-F-1] t_id;
broadcast chan tickManagerStart;
broadcast chan tickManagerStop;
broadcast chan tickStart;
broadcast chan tickStop;
chan tickAdvance[N-F];
chan tickAdvanceDone[N-F];
bool tickReady[N] = {true, true, true, true, true, true};

/*
** Value definition version1
** V = 1~2
** {false, false} =&gt; None
** {false, true}  =&gt; 1
** {true, false}  =&gt; 2
** {true, true}   =&gt; Nil
**
** V = 3~6
** {false, false, false} =&gt; None
** {false, false, true}  =&gt; 1
** {false, true, false}  =&gt; 2
** {false, true, true}   =&gt; 3
** {true, false, false}  =&gt; 4
** {true, false, true}   =&gt; 5
** {true, true, false}   =&gt; 6
** {true. true, true}    =&gt; Nil
**
**
** Value definition version2
** -1 =&gt; None
** 0  =&gt; Nil
** 1~V  =&gt; Value
**
** Value definition version3 &lt;---------- Using this V7.12
** V = 3
** false false false None
** 2 1 Nil.
*/

/*
** Message Class
** @round  Current node round
** @step   Current node status
** @value  Current propose/receive/send value
*/
typedef struct{
    int[-1, INFINITY] msg_round;
    int[-1, stepPrecommit] step;
    bool value[V];
}TendermintMessage;

/*
** Node Info Class
** @cnt_round             Round
** @cnt_propose_value     Received/send propose value
** @cnt_locked_round      Locked round
** @cnt_locked_vale       Locked value in locked round
** @cnt_polc_round        POLC round
** @cnt_polc_value        POLC value in polc round
*/
typedef struct{
    int[-1, INFINITY] cnt_round;
    bool cnt_propose_value[V];
    int[-1, INFINITY] cnt_locked_round;
    bool cnt_locked_value[V];
    int[-1, INFINITY] cnt_polc_round;
    bool cnt_polc_value[V];
}TendermintInfo;

/*
** Node Class
** @timer    Timer of each nodes
** @step     Node status: {propose, prevote, precommit, commit}
** @slot     Uncommit: -1, Commit: 1~V, Nil: 0
** @message  Message queue
*/
typedef struct{
    int[0, TIMERGAP] timer;
    int[stepPropose, stepCommit] step;
    bool slot[SLOTMAX][V];
    TendermintMessage message[MSGGAP];
    TendermintInfo info;
}TendermintNode;

TendermintNode NODE[N] = {
    {0, 0, {{false, false, false}, {false, false, false}, {false, false, false}}, {{-1, -1, {false, false, false}}, {-1, -1, {false, false, false}}, {-1, -1, {false, false, false}}}, {-1, {false, false, false}, -1, {false, false, false}, -1, {false, false, false}}},
    {0, 0, {{false, false, false}, {false, false, false}, {false, false, false}}, {{-1, -1, {false, false, false}}, {-1, -1, {false, false, false}}, {-1, -1, {false, false, false}}}, {-1, {false, false, false}, -1, {false, false, false}, -1, {false, false, false}}},
    {0, 0, {{false, false, false}, {false, false, false}, {false, false, false}}, {{-1, -1, {false, false, false}}, {-1, -1, {false, false, false}}, {-1, -1, {false, false, false}}}, {-1, {false, false, false}, -1, {false, false, false}, -1, {false, false, false}}},
    {0, 0, {{false, false, false}, {false, false, false}, {false, false, false}}, {{-1, -1, {false, false, false}}, {-1, -1, {false, false, false}}, {-1, -1, {false, false, false}}}, {-1, {false, false, false}, -1, {false, false, false}, -1, {false, false, false}}},
    {0, 0, {{false, false, false}, {false, false, false}, {false, false, false}}, {{-1, -1, {false, false, false}}, {-1, -1, {false, false, false}}, {-1, -1, {false, false, false}}}, {-1, {false, false, false}, -1, {false, false, false}, -1, {false, false, false}}},
    {0, 0, {{false, false, false}, {false, false, false}, {false, false, false}}, {{-1, -1, {false, false, false}}, {-1, -1, {false, false, false}}, {-1, -1, {false, false, false}}}, {-1, {false, false, false}, -1, {false, false, false}, -1, {false, false, false}}}
};


/*
** node layer function
*/
bool isParticipation(int node){
    return node &lt; nodeLayer[slotCur] ? true : false;
}</declaration>
	<template>
		<name>NodeSlot</name>
		<parameter>const s_id slotID</parameter>
		<declaration>void nextSlot(){
    slotCur += 1;
    if (slotCur &gt;= SLOTMAX) slotCur = SLOTMAX-1;
}

bool checkTimeout(){
    for (i: int[0, N-F-1]){
        if (NODE[i].info.cnt_round &gt;= INFINITY &amp;&amp; check_can_commit == true) return true;
    }
    return false;
}

bool checkSuccess(){
    for (i: int[0, N-F-1]){
        if (!commitList[i]) return false;
    }
    
    for (i: int[0, N-F-1]){
        for (j: int[0, N-F-1]){
            if (i &lt; nodeLayer[slotID] &amp;&amp; j &lt; nodeLayer[slotID]){
                if (NODE[i].slot[slotID] != NODE[j].slot[slotID]) return false;
            }
        }
    }

    return true;
}

bool checkFail(){
    for (i: int[0, N-F-1]){
        if (!commitList[i]) return false;
    }
    
    for (i: int[0, N-F-1]){
        for (j: int[0, N-F-1]){
            if (i &lt; nodeLayer[slotID] &amp;&amp; j &lt; nodeLayer[slotID]){
                if (NODE[i].slot[slotID] != NODE[j].slot[slotID]) return true;
            }
        }
        
        if (NODE[i].info.cnt_round &gt;= INFINITY &amp;&amp; check_can_commit == false) return true;
    }

    return false;
}</declaration>
		<location id="id0" x="-76" y="-68">
			<name x="-68" y="-102">SlotStarted</name>
		</location>
		<location id="id1" x="196" y="-68">
			<name x="170" y="-43">SlotSuccess</name>
		</location>
		<location id="id2" x="196" y="50">
			<name x="170" y="67">SlotFail</name>
		</location>
		<location id="id3" x="-238" y="-68">
			<name x="-248" y="-102">StartSlot</name>
		</location>
		<location id="id4" x="195" y="-195">
			<name x="170" y="-178">SlotTimeout</name>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="guard" x="42" y="-255">checkTimeout()</label>
			<label kind="synchronisation" x="42" y="-238">slotFail!</label>
			<label kind="assignment" x="42" y="-221">nextSlot()</label>
			<nail x="-76" y="-195"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="42" y="-127">checkSuccess()</label>
			<label kind="synchronisation" x="43" y="-111">slotSuccess!</label>
			<label kind="assignment" x="43" y="-94">nextSlot()</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="42" y="-8">checkFail()</label>
			<label kind="synchronisation" x="43" y="8">slotFail!</label>
			<label kind="assignment" x="43" y="25">nextSlot()</label>
			<nail x="-76" y="50"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="-246" y="-52">slotID == slotCur</label>
			<label kind="synchronisation" x="-246" y="-35">slotStarted[slotCur]!</label>
		</transition>
	</template>
	<template>
		<name>NodeNormal</name>
		<parameter>const n_id nodeID</parameter>
		<declaration>void resetState(){
    check_can_commit = false;

    NODE[nodeID].timer = 0;
    NODE[nodeID].step = stepPropose;
    NODE[nodeID].info.cnt_round = -1;
    NODE[nodeID].info.cnt_locked_round = -1;
    NODE[nodeID].info.cnt_polc_round = -1;
    for (i: int[0, V-1]){
        NODE[nodeID].info.cnt_propose_value[i] = false;
        NODE[nodeID].info.cnt_locked_value[i] = false;
        NODE[nodeID].info.cnt_polc_value[i] = false;
    }
    for (i: int[0, MSGGAP-1]){
        NODE[nodeID].message[i].msg_round = -1;
        NODE[nodeID].message[i].step = -1;
        for (j: int[0, V-1]){
            NODE[nodeID].message[i].value[j] = false;
        }
    }
    for (i: int[0, N-1]){
        commitList[i] = false;
    }
}

void startRoutine(){
    NODE[nodeID].info.cnt_round = 0;
    NODE[nodeID].step = stepPropose;
}

bool checkCommit(){
    int count = 0;
    for (i: int[0, N-1]){
        if (i &lt; nodeLayer[slotCur] &amp;&amp; commitList[i] == true){
            count += 1;
        }
    }

    if (count &gt;= nodeLayer[slotCur] || NODE[nodeID].info.cnt_round &gt;= INFINITY) return true;

    return NODE[nodeID].step == stepCommit ? true : false;
}

void doCommit(){
    commitList[nodeID] = true;
}

int indexMessage(){
    int count = 0;
    for (i: int[0, MSGGAP-1]){
        for (j: int[0, V-1]){
            if (NODE[nodeID].message[i].value[j] == false){
                count += 1;
            }
        }
        if (count == 3){
            return i;
        }
        count = 0;
    }
    return -1;
}

void messageQueue(){
    for (i: int[1, MSGGAP-1]){
        NODE[nodeID].message[i-1].msg_round = NODE[nodeID].message[i].msg_round;
        NODE[nodeID].message[i-1].step = NODE[nodeID].message[i].step;
        for (j: int[0, V-1]){
            NODE[nodeID].message[i-1].value[j] = NODE[nodeID].message[i].value[j];
        }
    }
}

void broadcastMessage(int step, bool value[V]){
    int index = indexMessage();
    if (index == -1) {
        messageQueue();
        index = MSGGAP-1;
    }

    NODE[nodeID].message[index].msg_round = NODE[nodeID].info.cnt_round;
    NODE[nodeID].message[index].step = step;
    for (i: int[0, V-1]){
        NODE[nodeID].message[index].value[i] = value[i];
    }
}

void newStep(){
    NODE[nodeID].step = (NODE[nodeID].step + 1) % 4;
    NODE[nodeID].timer = 0;
}

void enterRound(){
    NODE[nodeID].info.cnt_round += 1;
    NODE[nodeID].step = stepPropose;
    NODE[nodeID].timer = 0;
}

int totalVotingpower(){
    int totalvp = 0;
    for (i: int[0, N-1]){
        if (i &lt; nodeLayer[slotCur]) totalvp += VP[i];
    }
    return totalvp;
}

bool isProposer(){
    return (nodeID == proposedNode) ? true : false;
}

void selectionProposer(){
    //if (F &gt; N - nodeLayer[slotCur]) proposedNode = (proposedNode + 1) % (N-F);
    //else proposedNode = (proposedNode + 1) % nodeLayer[slotCur];

    int sum_p = 0;
    int sum_total = 0;
    int max_p = 0;
    int min_p = 0;

    sum_total = totalVotingpower();
    for (i: int[0, N-1]){
        if (i &lt; nodeLayer[slotCur]){
            sum_p += cnt_priority[i];
            if (max_p &lt; cnt_priority[i]){
                max_p = cnt_priority[i];
            }

            if (min_p &gt; cnt_priority[i]){
                min_p = cnt_priority[i];
            }
        }
    }
    if ((max_p - min_p) &gt; 2 * sum_total){
        int diff = max_p - min_p;
        int double_sum = 2 * sum_total;
        int p_scale = diff / double_sum;

        for (i: int[0, N-1]){
            if (i &lt; nodeLayer[slotCur]) cnt_priority[i] = cnt_priority[i]/p_scale;
        }
    }

    sum_p = 0;
    sum_p = totalVotingpower();

    for (i: int[0, N-1]){
        if (i &lt; nodeLayer[slotCur]) cnt_priority[i] -= sum_p / N;
    }
    for (i: int[0, N-1]){
        if (i &lt; nodeLayer[slotCur]) cnt_priority[i] += VP[i];
    }

    sum_p = 0;
    sum_p = totalVotingpower();

    for (i: int[0, N-1]){
        if (max_p &lt; cnt_priority[i] &amp;&amp; i &lt; nodeLayer[slotCur]){
            max_p = cnt_priority[i];
            proposedNode = i;
        }
    }
    cnt_priority[proposedNode] -= sum_p;
    return;
}

bool handleTimeout(int timeoutState, int Round){
    if (timeoutState == stepPropose){
        if (NODE[nodeID].timer &gt; timeoutPropose + Round * timeoutProposeDelta) {
            return true;
        }
    }
    else if (timeoutState == stepPrevote){
        if (NODE[nodeID].timer &gt; timeoutPrevote + Round * timeoutPrevoteDelta) {
            return true;
        }
    }
    else if (timeoutState == stepPrecommit){
        if (NODE[nodeID].timer &gt; timeoutPrecommit + Round * timeoutPrecommitDelta) {
            return true;
        }
    }
    return false;
}

int is23Maj(int step){
    int totalvp = totalVotingpower();
    int sumvp = 0;
    bool flag = false;
    
    if (step == stepPropose){
        for (v: int[0, V-1]){
            for (i: int[0, N-1]){
                for (j: int[0, MSGGAP-1]){
                    if (NODE[i].message[j].step == stepPropose 
                        &amp;&amp; NODE[i].message[j].msg_round == NODE[nodeID].info.cnt_round
                        &amp;&amp; NODE[i].message[j].value[v]){
                        return v;
                    }
                }
            }
        }
    }
    else if (step == stepPrevote){
        for (v: int[0, V-1]){
            for (i: int[0, N-1]){
                for (j: int[0, MSGGAP-1]){
                    if (NODE[i].message[j].step == stepPrevote
                        &amp;&amp; NODE[i].message[j].msg_round == NODE[nodeID].info.cnt_round
                        &amp;&amp; NODE[i].message[j].value[v]
                        &amp;&amp; flag == false){
                        sumvp += VP[i];
                        flag = true;
                    }
                }
            }
            
            if (3 * sumvp &gt; 2 * totalvp){
                return v;
            }
            sumvp = 0;
            flag = false;
        }      
    }
    else if (step == stepPrecommit){
        for (v: int[0, V-1]){
            for (i: int[0, N-1]){
                for (j: int[0, MSGGAP-1]){
                    if (NODE[i].message[j].step == stepPrecommit
                        &amp;&amp; NODE[i].message[j].msg_round == NODE[nodeID].info.cnt_round
                        &amp;&amp; NODE[i].message[j].value[v]
                        &amp;&amp; flag == false){
                        sumvp += VP[i];
                        flag = true;
                    }
                }
            }
            
            if (3 * sumvp &gt; 2 * totalvp){
                return v;
            }
            sumvp = 0;
            flag = true;
        } 
    }

    return -1;
}

bool checkValueNone(bool value[V]){
    for (i: int[0, V-1]){
        if (value[i]){
            return false;
        }
    }
    return true;
}

bool enterPropose(){
    if (isProposer()){
        if (!checkValueNone(NODE[nodeID].info.cnt_locked_value)){
            broadcastMessage(stepPropose, NODE[nodeID].info.cnt_locked_value);
            NODE[nodeID].info.cnt_propose_value = NODE[nodeID].info.cnt_locked_value;
        }
        else {
            bool value[V];
            for (i: int[0, V-1]){
                value[i] = false;
            }
            value[NODE[nodeID].timer % V] = true;
            broadcastMessage(stepPropose, value);
            NODE[nodeID].info.cnt_propose_value[NODE[nodeID].timer % V] = true;
        }
    }
    else {
        int index = is23Maj(stepPropose);
        if (index &gt; -1) NODE[nodeID].info.cnt_propose_value[index] = true;
    }

    if (!checkValueNone(NODE[nodeID].info.cnt_propose_value) || handleTimeout(stepPropose, NODE[nodeID].info.cnt_round)){
        return true;
    }
    return false;
}

void unlockNode(){
    if (NODE[nodeID].info.cnt_round != -1
        &amp;&amp; NODE[nodeID].info.cnt_polc_round &gt; -1
        &amp;&amp; NODE[nodeID].info.cnt_locked_round &lt; NODE[nodeID].info.cnt_polc_round
        &amp;&amp; NODE[nodeID].info.cnt_polc_round &lt; NODE[nodeID].info.cnt_round){
        NODE[nodeID].info.cnt_locked_round = -1;
        for (i: int[0, V-1]){
            NODE[nodeID].info.cnt_locked_value[i] = false;
        }
    }
}

bool enterPrevote(){
    int index;
    if (!checkValueNone(NODE[nodeID].info.cnt_locked_value)){
        broadcastMessage(stepPrevote, NODE[nodeID].info.cnt_locked_value);
    }
    else if (!checkValueNone(NODE[nodeID].info.cnt_propose_value)){
        broadcastMessage(stepPrevote, NODE[nodeID].info.cnt_propose_value);
    }

    index = is23Maj(stepPrevote);
    if (index &gt; -1){
        NODE[nodeID].info.cnt_polc_round = NODE[nodeID].info.cnt_round;
        NODE[nodeID].info.cnt_polc_value[index] = true;
        unlockNode();

        if (index &gt; 0) check_can_commit = true;

        return true;
    }
    if (handleTimeout(stepPrevote, NODE[nodeID].info.cnt_round)){
        return true;
    }
    return false;
}

bool enterPrecommit(){
    bool value[V];
    int index = is23Maj(stepPrevote);
    if (index &gt; -1){
        NODE[nodeID].info.cnt_locked_round = NODE[nodeID].info.cnt_round;
        NODE[nodeID].info.cnt_locked_value[index] = true;
        for (i: int[0, V-1]){
            value[i] = false;
        }
        value[is23Maj(stepPrevote)] = true;
        broadcastMessage(stepPrecommit, value);
    }

    if (is23Maj(stepPrecommit) &gt; 0){
        check_can_commit = true;
        NODE[nodeID].slot[slotCur][is23Maj(stepPrecommit)] = true;
        return true;
    }
    else if (handleTimeout(stepPrecommit, NODE[nodeID].info.cnt_round)){
        enterRound();
        selectionProposer();
        return true;
    }

    return false;
}

void receiveRoutine(){
    if (nodeID &gt;= nodeLayer[slotCur] || NODE[nodeID].info.cnt_round &gt;= INFINITY) return;
    if (NODE[nodeID].timer &gt;= TIMERGAP) NODE[nodeID].timer = 0;
    NODE[nodeID].timer += 1;
    
    if (NODE[nodeID].step == stepPropose){
        if (enterPropose()) newStep();
    }
    else if (NODE[nodeID].step == stepPrevote){
        if (enterPrevote()) newStep();
    }
    else if (NODE[nodeID].step == stepPrecommit){
        if (enterPrecommit()) newStep();
    }
}

</declaration>
		<location id="id5" x="25" y="178">
			<name x="8" y="144">Start</name>
		</location>
		<location id="id6" x="245" y="175">
			<name x="119" y="187">SthConsensus</name>
		</location>
		<location id="id7" x="474" y="175">
			<name x="464" y="141">Externalize</name>
		</location>
		<location id="id8" x="246" y="25">
			<committed/>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id8"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="306" y="34">tickAdvanceDone[nodeID]!</label>
			<nail x="331" y="93"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="guard" x="42" y="17">!checkCommit()</label>
			<label kind="synchronisation" x="42" y="34">tickAdvance[nodeID]?</label>
			<label kind="assignment" x="42" y="51">receiveRoutine()</label>
			<nail x="161" y="93"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="321" y="225">slotFail?</label>
			<label kind="assignment" x="321" y="242">resetState ()</label>
			<nail x="474" y="268"/>
			<nail x="24" y="268"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="92" y="225">slotFail?</label>
			<label kind="assignment" x="92" y="242">resetState ()</label>
			<nail x="245" y="268"/>
			<nail x="24" y="268"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="214" y="308">slotSuccess?</label>
			<label kind="assignment" x="214" y="325">resetState ()</label>
			<nail x="476" y="348"/>
			<nail x="26" y="347"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="323" y="136">checkCommit()</label>
			<label kind="assignment" x="323" y="153">doCommit()</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="85" y="136">slotStarted[slotCur]?</label>
			<label kind="assignment" x="85" y="153">startRoutine()</label>
		</transition>
	</template>
	<template>
		<name>NodeFaulty</name>
		<location id="id9" x="0" y="0">
		</location>
		<init ref="id9"/>
	</template>
	<template>
		<name>TickManager</name>
		<declaration>bool isDone() {
    for (t : t_id) {
        if (tickReady[t] == true) {
            return false;
        }
    }
    return true;
}

void resetTick() {
    for (t : t_id) {
        tickReady[t] = true;
    }
}
</declaration>
		<location id="id10" x="-382" y="-8">
		</location>
		<location id="id11" x="-144" y="-8">
			<committed/>
		</location>
		<location id="id12" x="85" y="-8">
		</location>
		<location id="id13" x="-144" y="-153">
			<committed/>
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-127" y="-280">slotUnknown?</label>
			<nail x="85" y="-289"/>
			<nail x="-144" y="-289"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-127" y="-212">slotFail?</label>
			<nail x="85" y="-221"/>
			<nail x="-144" y="-221"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-365" y="-144">tickStop!</label>
			<label kind="assignment" x="-365" y="-127">resetTick()</label>
			<nail x="-382" y="-153"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-127" y="-144">slotSuccess?</label>
			<nail x="85" y="-153"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id12"/>
			<label kind="guard" x="170" y="-34">isDone()</label>
			<label kind="assignment" x="170" y="0">resetTick()</label>
			<nail x="161" y="-68"/>
			<nail x="161" y="51"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-126" y="-25">tickStart!</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-364" y="-25">slotStarted[slotCur]?</label>
		</transition>
	</template>
	<template>
		<name>TickWorker</name>
		<parameter>const t_id tickID</parameter>
		<location id="id14" x="-306" y="0">
		</location>
		<location id="id15" x="-85" y="0">
		</location>
		<location id="id16" x="102" y="0">
		</location>
		<init ref="id14"/>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-51" y="68">tickAdvanceDone[tickID]?</label>
			<label kind="assignment" x="-51" y="85">tickReady[tickID] = false</label>
			<nail x="8" y="59"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="guard" x="-51" y="-102">tickReady[tickID] == true</label>
			<label kind="synchronisation" x="-51" y="-85">tickAdvance[tickID]!</label>
			<nail x="8" y="-59"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-289" y="-102">tickStop?</label>
			<nail x="-85" y="-110"/>
			<nail x="-306" y="-110"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-289" y="-25">tickStart?</label>
		</transition>
	</template>
	<system>system NodeSlot, NodeNormal, NodeFaulty, TickManager, TickWorker;</system>
	<queries>
		<query>
			<formula>E&lt;&gt; forall (i : s_id) NodeSlot(i).SlotSuccess</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; forall (i : s_id) NodeSlot(i).SlotFail</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; forall (i : s_id) NodeSlot(i).SlotTimeout</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] forall (i : s_id) not (NodeSlot(i).SlotFail || NodeSlot(i).SlotTimeout)</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
