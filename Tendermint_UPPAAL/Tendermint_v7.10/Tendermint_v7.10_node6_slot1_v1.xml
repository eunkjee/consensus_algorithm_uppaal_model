<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// constant value
const int N = 6;
const int F = 0;
typedef int[0, N-F-1] n_id;

const int SLOTMAX = 1;
typedef int[0,SLOTMAX-1] s_id;

const int V = 3;
const int VP = 10;

const int INFINITY = 5;
const int MSGGAP = 3;
const int PRIGAP = 0;
const int TIMERGAP = 10;
const int ROUNDGAP = 2;

// states
const int stepPropose = 0;
const int stepPrevote = 1;
const int stepPrecommit = 2;
const int stepCommit = 3;

const int timeoutPropose = 3;
const int timeoutProposeDelta = 1;
const int timeoutPrevote = 3;
const int timeoutPrevoteDelta = 1;
const int timeoutPrecommit = 3;
const int timeoutPrecommitDelta = 1;

// channel
broadcast chan slotDone;
broadcast chan slotSuccess;
broadcast chan slotFail;
broadcast chan slotUnknown;
broadcast chan slotDeadlock;
broadcast chan slotStarted[SLOTMAX+1];

// timer
typedef int[0,N-F-1] t_id;
broadcast chan tickManagerStart;
broadcast chan tickManagerStop;
broadcast chan tickStart;
broadcast chan tickStop;
chan tickAdvance[N-F];
chan tickAdvanceDone[N-F];
bool tickReady[N] = {true, true, true, true, true, true};

/*
** Value definition version1
** V = 1~2
** {false, false} =&gt; None
** {false, true}  =&gt; 1
** {true, false}  =&gt; 2
** {true, true}   =&gt; Nil
**
** V = 3~6
** {false, false, false} =&gt; None
** {false, false, true}  =&gt; 1
** {false, true, false}  =&gt; 2
** {false, true, true}   =&gt; 3
** {true, false, false}  =&gt; 4
** {true, false, true}   =&gt; 5
** {true, true, false}   =&gt; 6
** {true. true, true}    =&gt; Nil
**
**
** Value definition version2 &lt;---------- Using this V7.11
** false &amp;&amp; step != -1 &amp;&amp; round != -1 =&gt; Nil
** true &amp;&amp; step != -1 &amp;&amp; round != -1  =&gt; Value
** false &amp;&amp; step == -1 &amp;&amp; round == -1 =&gt; None
*/

/*
** Message Class
** @round  Current node round
** @step   Current node status
** @value  Current propose/receive value
*/
typedef struct{
    int[-1, INFINITY] msg_round;
    int[-1, stepPrecommit] step;
    bool value[V];
}TendermintMessage;

/*
** Node Info Class
** 
*/
typedef struct{
    int[-1, INFINITY] cnt_round;
    int[-1, INFINITY] cnt_locked_round;
    int[-1, INFINITY] cnt_polc_round;
    
}TendermintInfo;

/*
** Node Class
** @timer    Timer of each nodes
** @step     Node status: {propose, prevote, precommit, commit}
** @slot     Uncommit: -1, Commit: 1~V, Nil: 0
** @message  Message queue
*/
typedef struct{
    int[0, TIMERGAP] timer;
    int[stepPropose, stepCommit] step;
    int[-1, V] slot[SLOTMAX];
    TendermintMessage message[MSGGAP];
}TendermintNode;


</declaration>
	<template>
		<name>NodeSlot</name>
		<parameter>const s_id slotID</parameter>
		<location id="id0" x="-76" y="-68">
		</location>
		<location id="id1" x="196" y="-68">
			<name x="170" y="-43">SlotSuccess</name>
		</location>
		<location id="id2" x="196" y="50">
			<name x="170" y="67">SlotFail</name>
		</location>
		<location id="id3" x="-237" y="-68">
		</location>
		<location id="id4" x="195" y="-195">
			<name x="170" y="-178">SlotTimeout</name>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="42" y="-238">slotFail!</label>
			<label kind="assignment" x="42" y="-221">nextSlot()</label>
			<nail x="-76" y="-195"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="43" y="-111">slotSuccess!</label>
			<label kind="assignment" x="43" y="-94">nextSlot()</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="43" y="8">slotFail!</label>
			<label kind="assignment" x="43" y="25">nextSlot()</label>
			<nail x="-76" y="50"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="-246" y="-52">slotID == slotCur</label>
			<label kind="synchronisation" x="-246" y="-35">slotStarted[slotCur]!</label>
		</transition>
	</template>
	<template>
		<name>NodeNormal</name>
		<parameter>const n_id nodeID</parameter>
		<location id="id5" x="24" y="175">
		</location>
		<location id="id6" x="245" y="175">
		</location>
		<location id="id7" x="474" y="175">
		</location>
		<location id="id8" x="246" y="25">
			<committed/>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id8"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="306" y="34">tickAdvanceDone[nodeID]!</label>
			<nail x="331" y="93"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="42" y="34">tickAdvance[nodeID]?</label>
			<label kind="assignment" x="42" y="51">recieveRoutine()</label>
			<nail x="161" y="93"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="321" y="225">slotFail?</label>
			<label kind="assignment" x="321" y="242">resetState ()</label>
			<nail x="474" y="268"/>
			<nail x="24" y="268"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="92" y="225">slotFail?</label>
			<label kind="assignment" x="92" y="242">resetState ()</label>
			<nail x="245" y="268"/>
			<nail x="24" y="268"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="214" y="308">slotSuccess?</label>
			<label kind="assignment" x="214" y="325">resetState ()</label>
			<nail x="476" y="348"/>
			<nail x="26" y="347"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="assignment" x="323" y="153">doCommit ()</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="68" y="153">slotStarted[slotCur]?</label>
		</transition>
	</template>
	<template>
		<name>NodeFaulty</name>
		<location id="id9" x="0" y="0">
		</location>
		<init ref="id9"/>
	</template>
	<template>
		<name>TickManager</name>
		<declaration>bool isDone() {
    for (t : t_id) {
        if (tickReady[t] == true) {
            return false;
        }
    }
    return true;
}

void resetTick() {
    for (t : t_id) {
        tickReady[t] = true;
    }
}
</declaration>
		<location id="id10" x="-382" y="-8">
		</location>
		<location id="id11" x="-144" y="-8">
			<committed/>
		</location>
		<location id="id12" x="85" y="-8">
		</location>
		<location id="id13" x="-144" y="-153">
			<committed/>
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-127" y="-280">slotUnknown?</label>
			<nail x="85" y="-289"/>
			<nail x="-144" y="-289"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-127" y="-212">slotFail?</label>
			<nail x="85" y="-221"/>
			<nail x="-144" y="-221"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-365" y="-144">tickStop!</label>
			<label kind="assignment" x="-365" y="-127">resetTick()</label>
			<nail x="-382" y="-153"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-127" y="-144">slotSuccess?</label>
			<nail x="85" y="-153"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id12"/>
			<label kind="guard" x="170" y="-34">isDone()</label>
			<label kind="assignment" x="170" y="0">resetTick()</label>
			<nail x="161" y="-68"/>
			<nail x="161" y="51"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-126" y="-25">tickStart!</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-364" y="-25">slotStarted[slotCur]?</label>
		</transition>
	</template>
	<template>
		<name>TickWorker</name>
		<parameter>const t_id tickID</parameter>
		<location id="id14" x="-306" y="0">
		</location>
		<location id="id15" x="-85" y="0">
		</location>
		<location id="id16" x="102" y="0">
		</location>
		<init ref="id14"/>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-51" y="68">tickAdvanceDone[tickID]?</label>
			<label kind="assignment" x="-51" y="85">tickReady[tickID] = false</label>
			<nail x="8" y="59"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="guard" x="-51" y="-102">tickReady[tickID] == true</label>
			<label kind="synchronisation" x="-51" y="-85">tickAdvance[tickID]!</label>
			<nail x="8" y="-59"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-289" y="-102">tickStop?</label>
			<nail x="-85" y="-110"/>
			<nail x="-306" y="-110"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-289" y="-25">tickStart?</label>
		</transition>
	</template>
	<system>system NodeSlot, NodeNormal, NodeFaulty, TickManager, TickWorker;</system>
	<queries>
		<query>
			<formula>E&lt;&gt; forall (i : s_id) NodeSlot(i).SlotSuccess</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; forall (i : s_id) NodeSlot(i).SlotFail</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] forall (i : s_id) not NodeSlot(i).SlotFail</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
