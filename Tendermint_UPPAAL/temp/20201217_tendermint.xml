<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>const int N = 10;
typedef int[0, N-1] n_id;
const int M = 1000000;
const int block_size = 10;

chan propose[N], prevote[N], precommit[N], Commit[N];
//message history check / buffer? / how many? / control history
//states
const int state_prevote = 0;
const int state_precommit = 1;

const int msg_propose = 1;
const int msg_prevote = 2;
const int msg_precommit = 3;
const int msg_commit = 4;

const int msg_send = 2;
const int msg_received = 1;
const int msg_not_received = 0;

//types
const int type_commited = 1;
const int type_nil = 0;

//Block struct
typedef struct{
    int type;
    int height;
    int Round;
    int count;
}TDcommit;

typedef struct {
    int height;
    int data;
    TDcommit Commit;
}TDblock;

//BlockChain
typedef struct {
    int last_height;
    TDblock height[block_size]; 
}TDBlockChain;

//Node struct
typedef struct{
    int address;
    int voting_power;
    int proposer_priority;
}TDvalidator;

typedef struct{
    int type;
    int from_node;
    TDblock block;
}TDmsg;

typedef struct{
    int id;
    int Round;
    int LLR;
    int POLCR;
    TDblock vote_block;
    TDvalidator validator;
    TDmsg message;
    int msg_state;
}TDNode;

//initialize
int height = 0;
int proposal_node = 0;
int proposal_received = 0;
int prevote_received[N][M][3];
int precommit_received[N][M][3];
int data_list[N] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};

const TDblock none = {0, 0, {0, 0, 0, 0}};
TDblock proposal_block = none;
TDblock locked_block = none;

int current_msg_state;
TDmsg current_message = {0, -1, 0};

TDBlockChain blockchain = {-1, {none, none, none, none, none, none, none, none, none, none}};

TDNode node[N] = {
    {0, -1, -1, -1, none, {0, 10, 0}, {0, 0, {0, 0, 0, 0}}},
    {1, -1, -1, -1, none, {1, 10, 0}, {0, 0, {0, 0, 0, 0}}},
    {2, -1, -1, -1, none, {2, 10, 0}, {0, 0, {0, 0, 0, 0}}},
    {3, -1, -1, -1, none, {3, 10, 0}, {0, 0, {0, 0, 0, 0}}},
    {4, -1, -1, -1, none, {4, 10, 0}, {0, 0, {0, 0, 0, 0}}},
    {5, -1, -1, -1, none, {5, 10, 0}, {0, 0, {0, 0, 0, 0}}},
    {6, -1, -1, -1, none, {6, 10, 0}, {0, 0, {0, 0, 0, 0}}},
    {7, -1, -1, -1, none, {7, 10, 0}, {0, 0, {0, 0, 0, 0}}},
    {8, -1, -1, -1, none, {8, 10, 0}, {0, 0, {0, 0, 0, 0}}},
    {9, -1, -1, -1, none, {9, 10, 0}, {0, 0, {0, 0, 0, 0}}}
};

//general function
int total_validators_power(){
	int result = 0;

	for (i: int[0, N])
	{
		result += node[i].validator.voting_power;
	}

	return result;
}

</declaration>
	<template>
		<name x="5" y="5">BlockChain</name>
		<declaration>void initial_node(){
	int i = 0;
	while (i &lt; N)
	{
		node[i].Round = -1;
		node[i].LLR = -1;
		node[i].POLCR = -1;
	}
}

void add_block(){
    height++;
	blockchain.last_height += 1;
	blockchain.height[blockchain.last_height] = proposal_block;
}

</declaration>
		<location id="id0" x="-246" y="26">
			<name x="-280" y="43">ChainStart</name>
		</location>
		<location id="id1" x="-246" y="-195">
			<name x="-271" y="-229">ChainEnd</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-59" y="-102">proposal_block.Commit.type == type_commited</label>
			<label kind="assignment" x="-59" y="-77">add_block()</label>
			<nail x="1" y="-195"/>
			<nail x="1" y="26"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-331" y="-102">blockchain.last_height &lt; height</label>
			<label kind="assignment" x="-331" y="-76">initial_node()</label>
		</transition>
	</template>
	<template>
		<name>NodeCss</name>
		<parameter>const n_id nodeID</parameter>
		<declaration>void initial_css(){
	node[nodeID].Round = 0;
	node[nodeID].LLR = -1;
	node[nodeID].POLCR = -1;
	node[nodeID].vote_block = none;

	proposal_received = 0;
	for (i: int[0, N])
	{
		for (j: int[0, M])
		{
			prevote_received[i][j][0] = 0;
			prevote_received[i][j][1] = 0;
			prevote_received[i][j][2] = 0;
			precommit_received[i][j][0] = 0;
			precommit_received[i][j][1] = 0;
			precommit_received[i][j][2] = 0;
		}
	}
}


void step_propose(){
	if (nodeID == proposal_node)
	{
		proposal_received = 1;

		if (node[nodeID].LLR != -1)
		{
			node[nodeID].POLCR = node[nodeID].LLR;
			node[nodeID].vote_block = locked_block;
		}

		else
		{
			TDblock value = {height, (height + 1) * data_list[proposal_node], {type_nil, 0, -1, 0}};
			proposal_block = value;
			node[nodeID].vote_block = proposal_block;
		}
	}

	else
	{
		if (proposal_received == 1)
		{
			node[nodeID].vote_block = proposal_block;
		}
	}
}

bool is23maj_prevote(int data, int r){
	int sum_voting_power = 0;
	
	for (i: int[0, N])
	{
		if (prevote_received[i][r][0] == 1 &amp;&amp; prevote_received[i][r][1] == data)
		{
			sum_voting_power += prevote_received[i][r][2];
		}
	}

	if (sum_voting_power &gt; 2/3 * total_validators_power())
	{
		return true;
	}
	
	else
	{
		return false;
	}
}

bool is23maj_precommit(int data, int r){
	int sum_voting_power = 0;
	
	for (i: int[0, N])
	{
		if (precommit_received[i][r][0] == 1 &amp;&amp; precommit_received[i][r][1] == data)
		{
			sum_voting_power += precommit_received[i][r][2];
		}
	}

	if (sum_voting_power &gt; 2/3 * total_validators_power())
	{
		return true;
	}
	
	else
	{
		return false;
	}
}


void check_lock(){
	for (i: int[0, M]){
		if (is23maj_prevote(node[nodeID].vote_block.data, i))
		{
			if (node[nodeID].LLR &lt; i &amp;&amp; node[nodeID].Round &gt; i &amp;&amp; node[nodeID].vote_block != locked_block)
			{
				locked_block = none;
			}
		}
	}
}


void step_prevote(TDblock v_block){
	node[nodeID].vote_block = v_block;
	prevote_received[nodeID][node[nodeID].Round][0] = 1;
	prevote_received[nodeID][node[nodeID].Round][1] = node[nodeID].vote_block.data;
	prevote_received[nodeID][node[nodeID].Round][2] = node[nodeID].validator.voting_power;
	
}


void step_precommit(TDblock v_block){
	node[nodeID].vote_block = v_block;
	precommit_received[nodeID][node[nodeID].Round][0] = 1;
	precommit_received[nodeID][node[nodeID].Round][1] = node[nodeID].vote_block.data;
	precommit_received[nodeID][node[nodeID].Round][2] = node[nodeID].validator.voting_power;
}


void do_round(){
	node[nodeID].POLCR = -1;
	node[nodeID].Round = node[nodeID].Round + 1;

    if (node[nodeID].vote_block.data == 0)
    {
        node[nodeID].vote_block.Commit.Round += 1;
    }
}

</declaration>
		<location id="id2" x="-5873" y="417">
			<name x="-5899" y="433">StartCss</name>
		</location>
		<location id="id3" x="-5873" y="34">
			<name x="-5967" y="17">StartRound</name>
		</location>
		<location id="id4" x="-4547" y="34">
			<name x="-4522" y="25">wait_commit</name>
		</location>
		<location id="id5" x="-4547" y="416">
			<name x="-4573" y="432">Commit</name>
		</location>
		<location id="id6" x="-5678" y="-187">
			<name x="-5703" y="-229">proposer</name>
		</location>
		<location id="id7" x="-5678" y="238">
			<name x="-5720" y="255">not_proposer</name>
		</location>
		<location id="id8" x="-5457" y="34">
			<name x="-5499" y="59">wait_prevote</name>
		</location>
		<location id="id9" x="-5244" y="-272">
			<name x="-5304" y="-306">prevote_lockedblock</name>
		</location>
		<location id="id10" x="-5244" y="348">
			<name x="-5278" y="365">prevote_nil</name>
		</location>
		<location id="id11" x="-5015" y="34">
			<name x="-5066" y="-8">wait_precommit</name>
		</location>
		<location id="id12" x="-4785" y="348">
			<name x="-4836" y="365">precommit_nil</name>
		</location>
		<location id="id13" x="-4785" y="-272">
			<name x="-4836" y="-306">precommit_block</name>
		</location>
		<location id="id14" x="-5244" y="34">
			<name x="-5312" y="-8">prevote_proposedblock</name>
		</location>
		<location id="id15" x="-4785" y="34">
			<name x="-4845" y="0">precommit_is23_nil</name>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="guard" x="-5491" y="-110">node[nodeID].LLR != -1</label>
			<label kind="assignment" x="-5491" y="-93">check_lock()</label>
			<nail x="-5457" y="-102"/>
			<nail x="-5414" y="-34"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-4751" y="170">precommit[nodeID]!</label>
			<nail x="-4675" y="34"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-4743" y="-68">precommit[nodeID]!</label>
			<nail x="-4675" y="34"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-4743" y="25">precommit[nodeID]!</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="guard" x="-5040" y="229">!is23maj_prevote(node[nodeID].vote_block.data, node[nodeID].Round) &amp;&amp; !is23maj_prevote(0, node[nodeID].Round)</label>
			<label kind="assignment" x="-5040" y="246">step_precommit(none)</label>
			<nail x="-4887" y="34"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id13"/>
			<label kind="guard" x="-4955" y="-144">is23maj_prevote(node[nodeID].vote_block.data, node[nodeID].Round)</label>
			<label kind="assignment" x="-4955" y="-119">step_precommit(node[nodeID].vote_block), locked_block = node[nodeID].vote_block, node[nodeID].LLR = node[nodeID].Round</label>
			<nail x="-4887" y="34"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id15"/>
			<label kind="guard" x="-5031" y="102">is23maj_prevote(0, node[nodeID].Round)</label>
			<label kind="assignment" x="-5023" y="119">step_precommit(none), locked_block = none, node[nodeID].LLR = -1</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-5202" y="25">prevote[nodeID]!</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id14"/>
			<label kind="guard" x="-5363" y="68">locked_block == none &amp;&amp; proposal_block.data != 0</label>
			<label kind="assignment" x="-5363" y="85">step_prevote(proposal_block)</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-5219" y="136">prevote[nodeID]!</label>
			<nail x="-5142" y="34"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-5210" y="-102">prevote[nodeID]!</label>
			<nail x="-5142" y="34"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id10"/>
			<label kind="guard" x="-5363" y="178">locked_block == none &amp;&amp; proposal_block.data == 0</label>
			<label kind="assignment" x="-5363" y="195">step_prevote(none)</label>
			<nail x="-5346" y="34"/>
			<nail x="-5295" y="195"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="guard" x="-5321" y="-221">locked_block != none</label>
			<label kind="assignment" x="-5321" y="-204">step_prevote(locked_block)</label>
			<nail x="-5346" y="34"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id7"/>
			<label kind="guard" x="-5848" y="136">nodeID != proposal_node &amp;&amp; proposal_received == 1</label>
			<label kind="assignment" x="-5848" y="153">step_propose()</label>
			<nail x="-5763" y="34"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id6"/>
			<label kind="guard" x="-5822" y="-85">nodeID == proposal_node</label>
			<label kind="assignment" x="-5822" y="-68">step_propose()</label>
			<nail x="-5763" y="34"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<nail x="-5593" y="34"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-5669" y="-42">propose[nodeID]!</label>
			<nail x="-5593" y="34"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="-5397" y="-391">!is23maj_precommit(node[nodeID].vote_block.data, node[nodeID].Round)</label>
			<label kind="assignment" x="-5397" y="-374">do_round()</label>
			<nail x="-4547" y="-348"/>
			<nail x="-5873" y="-348"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-6120" y="331">node[nodeID].Round == -1 &amp;&amp; node[nodeID].LLR == -1 &amp;&amp; node[nodeID].POLCR == -1</label>
			<label kind="assignment" x="-6120" y="348">initial_css()</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id2"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-4768" y="306">is23maj_precommit(node[nodeID].vote_block.data, node[nodeID].Round)</label>
			<label kind="synchronisation" x="-4581" y="195">Commit[nodeID]!</label>
			<label kind="assignment" x="-4581" y="323">height++</label>
		</transition>
	</template>
	<template>
		<name>NodeMsg</name>
		<parameter>const n_id nodeID</parameter>
		<declaration>void set_msg_send(){
	for(i: int[0, N]){
		node[i].msg_state = msg_send;
		node[i].message.type = current_msg_state;
		if (current_msg_state == msg_propose){
			node[i].message.block = proposal_block;	
		}
		else{
			node[i].message.block = node[nodeID].vote_block;
		}
	}
}

void message_update(){
	if (current_msg_state == msg_propose){
		node[nodeID].vote_block = proposal_block;
	}
	else{
		node[nodeID].vote_block = node[nodeID].message.block;
	}
}</declaration>
		<location id="id16" x="-110" y="-119">
			<name x="-144" y="-102">node_send</name>
		</location>
		<location id="id17" x="-518" y="-272">
			<name x="-560" y="-255">msg_propose</name>
			<committed/>
		</location>
		<location id="id18" x="-263" y="-272">
			<name x="-305" y="-255">msg_prevote</name>
			<committed/>
		</location>
		<location id="id19" x="25" y="-272">
			<name x="-26" y="-255">msg_precommit</name>
			<committed/>
		</location>
		<location id="id20" x="272" y="-272">
			<name x="238" y="-255">msg_commit</name>
			<committed/>
		</location>
		<location id="id21" x="-110" y="-408">
			<name x="-195" y="-425">node_init</name>
		</location>
		<location id="id22" x="-246" y="-603">
			<name x="-289" y="-637">node_received</name>
		</location>
		<location id="id23" x="17" y="-603">
			<name x="-17" y="-637">msg_update</name>
		</location>
		<init ref="id21"/>
		<transition>
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="assignment" x="-238" y="-671">node[nodeID].msg_state = msg_received</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id21"/>
			<label kind="guard" x="-42" y="-518">node[nodeID].msg_state == msg_received</label>
			<label kind="assignment" x="-42" y="-501">message_update()</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="guard" x="-416" y="-518">node[nodeID].msg_state == msg_send</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id21"/>
			<label kind="assignment" x="-161" y="-255">set_msg_send()</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id16"/>
			<label kind="assignment" x="-17" y="-178">current_msg_state = msg_commit</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id16"/>
			<label kind="assignment" x="-153" y="-212">current_msg_state = msg_precommit</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="111" y="-331">Commit[nodeID]?</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-76" y="-331">precommit[nodeID]?</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id16"/>
			<label kind="assignment" x="-510" y="-204">current_msg_state = msg_propose</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id16"/>
			<label kind="assignment" x="-340" y="-170">current_msg_state = msg_prevote</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-500" y="-357">propose[nodeID]?</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="-263" y="-340">prevote[nodeID]?</label>
		</transition>
	</template>
	<system>system BlockChain, NodeCss, NodeMsg;</system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
